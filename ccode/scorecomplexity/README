Usage:
======

Type

scorecomplexity @optfile.opt

where OPTFILE.OPT specifies the parameters for the run.

OPTFILE.OPT is used to set the parameters stored in the data structure ps.
Any parameter not set in OPTFILE.OPT will take the default value specified
in parameters.c. A typical .opt file is as follows


; run-specific parameters for scoring partitions
--nsearch=100000000
--outfile=PATH_TO_OUTPUT_FILE
--partfile=PATH_TO_PARTITION_FILE
--enumindfile=PATH_TO_ENUMIND_FILE
--depfile=PATH_TO_DEPENDENCYMAP
--cxfile=PATH_TO_COMPLEXITY_FILE
--cxcfile=PATH_TO_INTRINSICCOMPLEXITY_FILE
--rmatfile=PATH_TO_RECIPROCAL_FILE
--rheuristic=1

where 
- nsearch is the maximum number of definitions to consider for each
  partition

- the output file includes two numbers for each partition. The first is
  equal to the minimal complexity of the partition, which is based on the
  intension complexities stored in COMPLEXITY_FILE. Currently these are set up
  so that each intension has complexity three -- which means that the total
  complexity will be equal to 3 times the smallest number of rules
  required to define the partition. The second number is the number of
  categories in the partition (latent categories not included)

- the partition file is a list of partitions, one per line -- will
  typically be generated by running dancinglinks

- the indices in PARTITION_FILE run from 1 to n, but the DEPENDENCY_MAP,
  the COMPLEXITY_FILE, the INTRINSICCOMPLEXITYFILE and the RECIPROCAL_FILE
  are all based on a larger set of concepts. ENUMIND_FILE picks out which
  concepts in the larger set correspond to the n indices used in
  PARTITION_FILE.

- DEPENDENCYMAP specifies the intensions for each category.

- COMPLEXITY_FILE specifies the complexity for each intension

- INTRINSICCOMPLEXITY_FILE specifies the intrinsic complexity for each
  intension

- RMAT_FILE picks out concepts that are reciprocals of each other.

- RHEURISTIC indicates whether a heuristic for introducing reciprocals
  will be used.

Purpose:
========

Score the complexity of the partitions in PARTITION_FILE. The total
complexity will depend on the intension-complexities in COMPLEXITY_FILE.

General approach:
================

Given a partition to score, the categories in the partition are added to a
heap. The key for each category is the number of intensions that it has.
We then repeatedly:
1) retrieve a category from the heap with minimal key
2) choose an intension for that category, preferring intensions that rely
on already-defined concepts and therefore "come for free"
3) add all categories that appear in the chosen intension to the heap if
they haven't been previously added
4) return to (1) and iterate

until the heap is empty, which means that we've successfully found a set
of intensions that accounts for the partition. 

If the category chosen in (1) is the reciprocal of a category that is
currently in the heap, then applying the "reciprocal heuristic" means that
we use this reciprocal relationship to define the chosen category. This
heuristic is often useful but doesn't always lead to the minimal
complexity solution -- sometimes it is preferable to define the in-heap
category as the reciprocal of the chosen category rather than vice versa.

Acknowledgements:
=================

-- The OPT package was written by James Theiler and is available from
   http://public.lanl.gov/jt/Software/

-- The binary heap implementation was written by Shane Saunders and was
downloaded from
http://www.cosc.canterbury.ac.nz/research/RG/alg/heaps.html


